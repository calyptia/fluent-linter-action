/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/verification_email': {
    get: operations['sendVerificationEmail'];
  };
  '/v1/projects': {
    get: operations['projects'];
    post: operations['createProject'];
  };
  '/v1/projects/{projectID}': {
    get: operations['project'];
  };
  '/v1/projects/{projectID}/tokens': {
    /** Hint: use `?last=1` to fetch just the last active token. */
    get: operations['projectTokens'];
    /** These tokens allow agents to register themselves at the Cloud. */
    post: operations['createProjectToken'];
  };
  '/v1/project_tokens/{tokenID}': {
    get: operations['projectToken'];
    delete: operations['deleteProjectToken'];
    patch: operations['updateProjectToken'];
  };
  '/v1/agents': {
    /** You must first create a new (project) token or fetch the last one. */
    post: operations['createAgent'];
  };
  '/v1/projects/{projectID}/agents': {
    get: operations['projectAgents'];
  };
  '/v1/agents/{agentID}': {
    get: operations['agent'];
    /** Delete an agent and their associated API key. */
    delete: operations['deleteAgent'];
    patch: operations['updateAgent'];
  };
  '/v1/projects/{projectID}/metrics': {
    get: operations['metrics'];
  };
  '/v1/agent_metrics': {
    /** Stores the received metrics in the metrics database */
    post: operations['addAgentMetrics'];
  };
  '/v1/agents/{agentID}/metrics': {
    get: operations['agentMetrics'];
    post: {
      responses: {
        /** Redirect */
        308: never;
      };
    };
  };
  '/v1/pipeline_metrics/{pipelineID}': {
    get: operations['pipelineMetrics'];
  };
  '/v1/agents/{agentID}/config_history': {
    /**
     * A new config history item is stored everytime an agent is created
     * or updated and its config changes.
     */
    get: operations['agentConfigHistory'];
  };
  '/projects/{projectID}/aggregator_pipelines': {
    /** List all pipelines from within a project. */
    get: operations['projectPipelines'];
  };
  '/v1/aggregator_pipelines/{pipelineID}/config_history': {
    /**
     * A new config history item is stored everytime a pipeline is created
     * or updated and its config changes.
     */
    get: operations['pipelineConfigHistory'];
  };
  '/v1/aggregator_pipelines/{pipelineID}/status_history': {
    /**
     * A new status history item is stored everytime a pipeline is created
     * or updated and/or its status changes.
     */
    get: operations['pipelineStatusHistory'];
  };
  '/v1/config_validate/{agentType}': {
    post: operations['agentConfigValidation'];
  };
}

export interface components {
  schemas: {
    validatedConfig: {
      runtime: string[];
      parser: string[];
      filter: string[];
      results: string[];
    };
    configToValidate: {
      config: {
        command: string;
        name: string;
        optional: { [key: string]: unknown };
        id: string;
      }[];
    };
    error: {
      error: string;
    };
    project: {
      id: string;
      name: string;
      createdAt: string;
      membership?: components['schemas']['projectMembership'];
    };
    projectMembership: {
      id: string;
      roles?: ('creator' | 'admin')[];
      createdAt: string;
    };
    projectToken: {
      id: string;
      token: string;
      name: string;
      createdAt: string;
    };
    agent: {
      id: string;
      token: string;
      /** RFC1123 hostname */
      name: string;
      machineID: string;
      type: 'fluentbit' | 'fluentd';
      /** Minimum agent version is 1.8.6 for fluent-bit case. */
      version: string;
      edition: 'enterprise' | 'community';
      flags?: string[];
      rawConfig?: string;
      metadata?: components['schemas']['agentMetadata'];
      metricsAddedAt?: string;
      metricsCount?: number;
      createdAt: string;
      updatedAt?: string;
    };
    agentMetadata: { [key: string]: unknown };
    metricField: {
      time: string;
      value?: number;
    };
    agentConfig: {
      id: string;
      rawConfig: string;
      createdAt: string;
    };
    aggregatorPipeline: {
      id?: string;
      name?: string;
      config?: components['schemas']['pipelineConfig'];
      status?: components['schemas']['pipelineStatus'];
      replicasCount?: number;
      createdAt?: string;
      updatedAt?: string;
    };
    pipelineConfig: {
      id?: string;
      rawConfig?: string;
      createdAt?: string;
      updatedAt?: string;
    };
    pipelineStatus: {
      id?: string;
      config?: components['schemas']['pipelineConfig'];
      status?: 'NEW' | 'FAILED' | 'STARTING' | 'STARTED' | 'DELETED';
      createdAt?: string;
      updatedAt?: string;
    };
  };
  responses: {
    /** Bad request */
    badRequestError: {
      content: {
        'application/json': components['schemas']['error'];
      };
    };
    /** Internal server error */
    internalServerError: {
      content: {
        'application/json': components['schemas']['error'];
      };
    };
  };
}

export interface operations {
  sendVerificationEmail: {
    responses: {
      /** Sent */
      204: never;
      /** Unauthenticated */
      401: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Too Many Requests */
      429: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      500: components['responses']['internalServerError'];
      /** Unavailable */
      503: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
    };
  };
  projects: {
    parameters: {
      query: {
        /** Filter projects by the given name */
        name?: string;
        /**
         * Fetch just the last projects.
         * Zero fetches all.
         */
        last?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['project'][];
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Invalid arguments */
      422: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
  createProject: {
    responses: {
      /** Created */
      201: {
        content: {
          'application/json': {
            id?: string;
            membership?: components['schemas']['projectMembership'];
            /** Your project token. */
            token?: string;
            createdAt?: string;
          };
        };
      };
      400: components['responses']['internalServerError'];
      /** Unauthenticated */
      401: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Invalid arguments */
      422: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      500: components['responses']['internalServerError'];
    };
    requestBody: {
      content: {
        'application/json': {
          name: string;
        };
      };
    };
  };
  project: {
    parameters: {
      path: {
        projectID: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['project'];
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Invalid arguments */
      422: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
  /** Hint: use `?last=1` to fetch just the last active token. */
  projectTokens: {
    parameters: {
      path: {
        projectID: string;
      };
      query: {
        /** Filter tokens by the given name */
        name?: string;
        /**
         * Fetch just the last tokens.
         * Zero fetches all.
         */
        last?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['projectToken'][];
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Invalid arguments */
      422: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
  /** These tokens allow agents to register themselves at the Cloud. */
  createProjectToken: {
    parameters: {
      path: {
        projectID: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          'application/json': components['schemas']['projectToken'];
        };
      };
      400: components['responses']['internalServerError'];
      /** Unauthenticated */
      401: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Conflict */
      409: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Invalid arguments. */
      422: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      500: components['responses']['internalServerError'];
    };
    requestBody: {
      content: {
        'application/json': {
          /** Name is be unique to you. */
          name: string;
        };
      };
    };
  };
  projectToken: {
    parameters: {
      path: {
        tokenID: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['projectToken'];
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Invalid arguments */
      422: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
  deleteProjectToken: {
    parameters: {
      path: {
        tokenID: string;
      };
    };
    responses: {
      /** Deleted */
      204: never;
      /** Unauthenticated */
      401: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Invalid arguments */
      422: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
  updateProjectToken: {
    responses: {
      /** Updated */
      204: never;
      400: components['responses']['internalServerError'];
      /** Unauthenticated */
      401: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Conflict */
      409: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Invalid arguments. */
      422: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      500: components['responses']['internalServerError'];
    };
    requestBody: {
      content: {
        'application/json': {
          /** Name is be unique to you. */
          name?: string;
        };
      };
    };
  };
  /** You must first create a new (project) token or fetch the last one. */
  createAgent: {
    responses: {
      /** OK (updated) */
      200: {
        content: {
          'application/json': {
            id?: string;
            token?: string;
            name?: string;
            createdAt?: string;
          };
        };
      };
      /** Created */
      201: {
        content: {
          'application/json': {
            id?: string;
            token?: string;
            name?: string;
            createdAt?: string;
          };
        };
      };
      400: components['responses']['badRequestError'];
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Gone */
      410: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Invalid arguments */
      422: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      500: components['responses']['internalServerError'];
    };
    requestBody: {
      content: {
        'application/json': {
          /** RFC1123 hostname */
          name: string;
          machineID: string;
          type: 'fluentbit' | 'fluentd';
          /** Minimum agent version is 1.8.6 for fluent-bit case. */
          version: string;
          edition?: string;
          flags?: string[];
          rawConfig?: string;
          metadata?: components['schemas']['agentMetadata'];
        };
      };
    };
  };
  projectAgents: {
    parameters: {
      path: {
        projectID: string;
      };
      query: {
        /** Filter agents by the given name. */
        name?: string;
        /**
         * Fetch just the last agents.
         * Zero fetches all.
         */
        last?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['agent'][];
        };
      };
      /** Unautenticated */
      401: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Unauthorized */
      403: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Invalid arguments */
      422: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
  agent: {
    parameters: {
      path: {
        agentID: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['agent'];
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Not found */
      404: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Invalid arguments */
      422: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
  /** Delete an agent and their associated API key. */
  deleteAgent: {
    parameters: {
      path: {
        agentID: string;
      };
    };
    responses: {
      /** Deleted */
      204: never;
      /** Unauthenticated */
      401: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Invalid arguments */
      422: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
  updateAgent: {
    parameters: {
      path: {
        agentID: string;
      };
    };
    responses: {
      /** Updated */
      204: never;
      400: components['responses']['badRequestError'];
      /** Unauthenticated or unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Gone */
      410: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Invalid arguments */
      422: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      500: components['responses']['internalServerError'];
    };
    requestBody: {
      content: {
        'application/json': {
          /** RFC1123 hostname */
          name?: string;
          /** Minimum agent version is 1.8.6 for fluent-bit case. */
          version?: string;
          edition?: 'community' | 'enterprise';
          flags?: string[];
          rawConfig?: string;
          metadata?: components['schemas']['agentMetadata'];
        };
      };
    };
  };
  metrics: {
    parameters: {
      path: {
        projectID: string;
      };
      query: {
        /** Option to filter metrics since the given time ago */
        start?: string;
        /** Option to set the time window to group metrics */
        interval?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            measurements: {
              [key: string]: {
                totals: { [key: string]: number };
                plugins: {
                  [key: string]: {
                    metrics: {
                      [key: string]: components['schemas']['metricField'][];
                    };
                  };
                };
              };
            };
            topPlugins?: {
              [key: string]: {
                bytes: number;
              };
            };
          };
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Invalid arguments */
      422: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
  /** Stores the received metrics in the metrics database */
  addAgentMetrics: {
    parameters: {
      path: {
        agentID: string;
      };
    };
    responses: {
      /** Added */
      201: {
        content: {
          'application/json': {
            totalInserted: number;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Invalid metrics */
      422: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      500: components['responses']['internalServerError'];
    };
    requestBody: {
      content: {
        'application/x-msgpack': string;
      };
    };
  };
  agentMetrics: {
    parameters: {
      path: {
        agentID: string;
      };
      query: {
        /** Option to filter metrics since the given time ago */
        start?: string;
        /** Option to set the time window to group metrics */
        interval?: string;
      };
    };
    responses: {
      /** returns the list of metrics for the agent */
      200: {
        content: {
          'application/json': {
            measurements: {
              [key: string]: {
                plugins: {
                  [key: string]: {
                    metrics: {
                      [key: string]: components['schemas']['metricField'][];
                    };
                  };
                };
                totals: {
                  [key: string]: components['schemas']['metricField'][];
                };
              };
            };
          };
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Invalid arguments */
      422: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
  pipelineMetrics: {
    parameters: {
      path: {
        pipelineID: string;
      };
      query: {
        /** Option to filter metrics since the given time ago */
        start?: string;
        /** Option to set the time window to group metrics */
        interval?: string;
      };
    };
    responses: {
      /** returns the list of metrics for the pipeline */
      200: {
        content: {
          'application/json': {
            measurements: {
              [key: string]: {
                plugins: {
                  [key: string]: {
                    metrics: {
                      [key: string]: components['schemas']['metricField'][];
                    };
                  };
                };
                totals: {
                  [key: string]: components['schemas']['metricField'][];
                };
              };
            };
          };
        };
      };
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Invalid arguments */
      422: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
  /**
   * A new config history item is stored everytime an agent is created
   * or updated and its config changes.
   */
  agentConfigHistory: {
    parameters: {
      path: {
        agentID: string;
      };
      query: {
        /**
         * Fetch just the last configurations items in history.
         * Zero fetches all.
         */
        last?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['agentConfig'][];
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Invalid arguments */
      422: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
  /** List all pipelines from within a project. */
  projectPipelines: {
    parameters: {
      path: {
        projectID: string;
      };
      query: {
        /** Filter projects by the given name */
        name?: string;
        /**
         * Fetch just the last pipelines.
         * Zero fetches all.
         */
        last?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['aggregatorPipeline'][];
        };
      };
      /** Unauthenticated or unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Invalid arguments */
      422: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
  /**
   * A new config history item is stored everytime a pipeline is created
   * or updated and its config changes.
   */
  pipelineConfigHistory: {
    parameters: {
      path: {
        pipelineID: string;
      };
      query: {
        /**
         * Fetch just the last configurations items in history.
         * Zero fetches all.
         */
        last?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['pipelineConfig'][];
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Invalid arguments */
      422: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
  /**
   * A new status history item is stored everytime a pipeline is created
   * or updated and/or its status changes.
   */
  pipelineStatusHistory: {
    parameters: {
      path: {
        pipelineID: string;
      };
      query: {
        /**
         * Fetch just the last status items in history.
         * Zero fetches all.
         */
        last?: number;
        /** Filter results by pipeline status */
        status?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['pipelineStatus'][];
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Not Found */
      404: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      /** Invalid arguments */
      422: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      500: components['responses']['internalServerError'];
    };
  };
  agentConfigValidation: {
    responses: {
      /** Succeeded to validate the given configuration */
      200: {
        content: {
          'application/json': components['schemas']['validatedConfig'];
        };
      };
      /** Unauthenticated */
      401: {
        content: {
          'application/json': components['schemas']['error'];
        };
      };
      500: components['responses']['internalServerError'];
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['configToValidate'];
      };
    };
  };
}
