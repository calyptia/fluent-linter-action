openapi: '3.0.3'
info:
  title: Calyptia Cloud API
  version: '0.1.2'
  description: |
    API deprecation will be informed through headers.
    ```
    Deprecation: Mon, 02 Jan 2006 15:04:05 GMT
    Sunset: Tue, 03 Jan 2006 15:04:05 GMT
    ```
    `Deprecation` tells when the API was deprecated,
    and `Sunset` tells when the API will stop working.
    You should migrate to the new API before sunset or you will get a `410 Gone` response.
    The time format on both is `RFC1123`.
    It is highly recommended to use a middleware the detects these headers.
servers:
  - url: http://localhost:5000
    description: Local development server.
  - url: https://cloud-api-dev.calyptia.com
    description: Development server.
  - url: https://cloud-api.calyptia.com
    description: Production server.
components:
  schemas:
    validatedConfig:
      type: object
      required:
        - runtime
        - parser
        - filter
        - results
      properties:
        runtime:
          type: array
          items:
            type: string
        parser:
          type: array
          items:
            type: string
        filter:
          type: array
          items:
            type: string
        results:
          type: array
          items:
            type: string
    configToValidate:
      type: object
      required:
        - config
      properties:
        config:
          type: array
          items:
            type: object
            required:
              - command
              - name
              - optional
              - id
            properties:
              command:
                type: string
              name:
                type: string
              optional:
                type: object
              id:
                type: string
                format: uuid
    error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          example: internal server error
    project:
      type: object
      required:
        - id
        - name
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 64
          example: Project Name
        createdAt:
          type: string
          format: date-time
        membership:
          $ref: '#/components/schemas/projectMembership'
    projectMembership:
      type: object
      required:
        - id
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        roles:
          type: array
          items:
            type: string
            enum:
              - creator
              - admin
        createdAt:
          type: string
          format: date-time
    projectToken:
      type: object
      required:
        - id
        - token
        - name
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        token:
          type: string
        name:
          type: string
          maxLength: 64
        createdAt:
          type: string
          format: date-time
    agent:
      type: object
      required:
        - id
        - token
        - name
        - machineID
        - type
        - version
        - edition
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        token:
          type: string
        name:
          description: RFC1123 hostname
          type: string
          format: hostname
          example: my-machine
        machineID:
          type: string
          maxLength: 64
        type:
          type: string
          enum:
            - fluentbit
            - fluentd
        version:
          type: string
          example: '1.7.9'
          description: Minimum agent version is 1.8.6 for fluent-bit case.
        edition:
          type: string
          enum:
            - enterprise
            - community
        flags:
          type: array
          items:
            type: string
          example:
            - FLB_HAVE_TLS
            - FLB_HAVE_METRICS
            - FLB_HAVE_SQLDB
            - FLB_HAVE_TRACE
            - FLB_HAVE_HTTP_SERVER
            - FLB_HAVE_FLUSH_LIBCO
            - FLB_HAVE_SYSTEMD
            - FLB_HAVE_VALGRIND
            - FLB_HAVE_FORK
            - FLB_HAVE_PROXY_GO
            - FLB_HAVE_REGEX
            - FLB_HAVE_C_TLS
            - FLB_HAVE_SETJMP
            - FLB_HAVE_ACCEPT4
            - FLB_HAVE_INOTIFY
        rawConfig:
          type: string
          example: |
            [SERVICE]
                Flush           5
                Daemon          off
                Log_Level       debug
        metadata:
          $ref: '#/components/schemas/agentMetadata'
        metricsAddedAt:
          type: string
          format: date-time
        metricsCount:
          type: integer
          format: int
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    agentMetadata:
      type: object
    metricField:
      type: object
      required:
        - time
      properties:
        time:
          type: string
          format: date-time
        value:
          type: number
          format: float
    agentConfig:
      type: object
      required:
        - id
        - rawConfig
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        rawConfig:
          type: string
          example: |
            [SERVICE]
                Flush           5
                Daemon          off
                Log_Level       debug
        createdAt:
          type: string
          format: date-time
    aggregatorPipeline:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        config:
          $ref: '#/components/schemas/pipelineConfig'
        status:
          $ref: '#/components/schemas/pipelineStatus'
        replicasCount:
          type: integer
          format: int64
          default: 10
          minimum: 0
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    pipelineConfig:
      type: object
      properties:
        id:
          type: string
          format: uuid
        rawConfig:
          type: string
          example: |
            [SERVICE]
                Flush           5
                Daemon          off
                Log_Level       debug
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    pipelineStatus:
      type: object
      properties:
        id:
          type: string
          format: uuid
        config:
          $ref: '#/components/schemas/pipelineConfig'
        status:
          enum:
            - NEW
            - FAILED
            - STARTING
            - STARTED
            - DELETED
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

  responses:
    badRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
          example:
            error: bad request
    internalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'

  securitySchemes:
    userAuth:
      description: |
        JSON web token issued by auth0 that holds user authentication.
      type: http
      scheme: bearer
      bearerFormat: JWT
    projectAuth:
      description: |
        Token used to register agents in Cloud.
        You can create and delete as many as you want.
        This allows to automate the process of adding agents to the users's
        default project since the same token can be used by many agents.
      type: apiKey
      in: header
      name: x-project-token
    agentAuth:
      description: |
        Token used to authenticate a single agent.
        You get this token when you register a new agent in Cloud
        using the project token.
        This token is unique to the agent and should not be shared.
      type: apiKey
      in: header
      name: x-agent-token

paths:
  /v1/verification_email:
    get:
      security:
        - userAuth: []
      summary: Send verification email
      operationId: sendVerificationEmail
      tags: [User]
      responses:
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: unauthenticated
        429:
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: verification email already sent
        503:
          description: Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: unavailable
        500:
          $ref: '#/components/responses/internalServerError'
        204:
          description: Sent
  /v1/projects:
    post:
      security:
        - userAuth: []
      summary: Create project
      operationId: createProject
      tags: [Project]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  maxLength: 64
                  example: New project
      responses:
        400:
          $ref: '#/components/responses/internalServerError'
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: unauthenticated
        422:
          description: Invalid arguments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: invalid project name
        500:
          $ref: '#/components/responses/internalServerError'
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  membership:
                    $ref: '#/components/schemas/projectMembership'
                  token:
                    type: string
                    description: Your project token.
                  createdAt:
                    type: string
                    format: date-time
    get:
      security:
        - userAuth: []
      summary: Projects
      operationId: projects
      tags: [Project]
      parameters:
        - name: name
          in: query
          description: |
            Filter projects by the given name
          schema:
            type: string
        - name: last
          in: query
          description: |
            Fetch just the last projects.
            Zero fetches all.
          schema:
            type: integer
            format: int64
            default: 10
            minimum: 0
      responses:
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: unauthenticated
        422:
          description: Invalid arguments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                InvalidProjectName:
                  value:
                    error: invalid project name
                InvalidLast:
                  value:
                    error: invalid last
        500:
          $ref: '#/components/responses/internalServerError'
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/project'
  /v1/projects/{projectID}:
    get:
      security:
        - userAuth: []
        - projectAuth: []
      summary: Project
      operationId: project
      tags: [Project]
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: unauthenticated
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: project not found
        422:
          description: Invalid arguments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: invalid project ID
        500:
          $ref: '#/components/responses/internalServerError'
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
  /v1/projects/{projectID}/tokens:
    post:
      security:
        - userAuth: []
      summary: Create project token
      description: |
        These tokens allow agents to register themselves at the Cloud.
      operationId: createProjectToken
      tags: [Project Token]
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  description: |
                    Name is be unique to you.
                  type: string
                  maxLength: 64
      responses:
        400:
          $ref: '#/components/responses/internalServerError'
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: unauthenticated
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: project token name taken
        422:
          description: Invalid arguments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                InvalidProjectID:
                  value:
                    error: invalid project ID
                InvalidProjectTokenName:
                  value:
                    error: invalid project token name
        500:
          $ref: '#/components/responses/internalServerError'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projectToken'
    get:
      security:
        - userAuth: []
      summary: Project tokens
      description: |
        Hint: use `?last=1` to fetch just the last active token.
      operationId: projectTokens
      tags: [Project Token]
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: name
          in: query
          description: |
            Filter tokens by the given name
          schema:
            type: string
        - name: last
          in: query
          description: |
            Fetch just the last tokens.
            Zero fetches all.
          schema:
            type: integer
            format: int64
            default: 10
            minimum: 0
      responses:
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: unauthenticated
        422:
          description: Invalid arguments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                InvalidProjectID:
                  value:
                    error: invalid project ID
                InvalidProjectTokenName:
                  value:
                    error: invalid project token name
                InvalidLast:
                  value:
                    error: invalid last
        500:
          $ref: '#/components/responses/internalServerError'
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/projectToken'
  /v1/project_tokens/{tokenID}:
    get:
      security:
        - userAuth: []
        - projectAuth: []
      summary: Project token
      operationId: projectToken
      tags: [Project Token]
      parameters:
        - name: tokenID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: unauthenticated
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: project token not found
        422:
          description: Invalid arguments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: invalid project token ID
        500:
          $ref: '#/components/responses/internalServerError'
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projectToken'
    patch:
      security:
        - userAuth: []
        - projectAuth: []
      summary: Update project token
      operationId: updateProjectToken
      tags: [Project Token]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: |
                    Name is be unique to you.
                  type: string
                  maxLength: 64
      responses:
        400:
          $ref: '#/components/responses/internalServerError'
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: unauthenticated
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: project token not found
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: project token name taken
        422:
          description: Invalid arguments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                InvalidProjectTokenID:
                  value:
                    error: invalid project token ID
                InvalidProjectTokenName:
                  value:
                    error: invalid project token name
        500:
          $ref: '#/components/responses/internalServerError'
        204:
          description: Updated
    delete:
      security:
        - userAuth: []
        - projectAuth: []
      summary: Delete project token
      operationId: deleteProjectToken
      tags: [Project Token]
      parameters:
        - name: tokenID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: unauthenticated
        422:
          description: Invalid arguments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: invalid project token ID
        500:
          $ref: '#/components/responses/internalServerError'
        204:
          description: Deleted
  /v1/agents:
    post:
      security:
        - projectAuth: []
      summary: Create agent
      description: |
        You must first create a new (project) token or fetch the last one.
      operationId: createAgent
      tags: [Agent]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - machineID
                - type
                - version
              properties:
                name:
                  description: RFC1123 hostname
                  type: string
                  format: hostname
                  example: my-machine
                machineID:
                  type: string
                  maxLength: 64
                type:
                  type: string
                  enum:
                    - fluentbit
                    - fluentd
                version:
                  type: string
                  example: '1.7.9'
                  description: Minimum agent version is 1.8.6 for fluent-bit case.
                edition:
                  type: string
                  example: community
                flags:
                  type: array
                  items:
                    type: string
                  example:
                    - FLB_HAVE_TLS
                    - FLB_HAVE_METRICS
                    - FLB_HAVE_SQLDB
                    - FLB_HAVE_TRACE
                    - FLB_HAVE_HTTP_SERVER
                    - FLB_HAVE_FLUSH_LIBCO
                    - FLB_HAVE_SYSTEMD
                    - FLB_HAVE_VALGRIND
                    - FLB_HAVE_FORK
                    - FLB_HAVE_PROXY_GO
                    - FLB_HAVE_REGEX
                    - FLB_HAVE_C_TLS
                    - FLB_HAVE_SETJMP
                    - FLB_HAVE_ACCEPT4
                    - FLB_HAVE_INOTIFY
                rawConfig:
                  type: string
                  example: |
                    [SERVICE]
                        Flush           5
                        Daemon          off
                        Log_Level       debug
                metadata:
                  $ref: '#/components/schemas/agentMetadata'
      responses:
        400:
          $ref: '#/components/responses/badRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                InvalidProjectToken:
                  value:
                    error: invalid project token
                Unauthorized:
                  value:
                    error: unauthorized
        410:
          description: Gone
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: project gone
        422:
          description: Invalid arguments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                InvalidAgentName:
                  value:
                    error: invalid agent name
                InvalidMachineID:
                  value:
                    error: invalid machine ID
                InvalidAgentType:
                  value:
                    error: invalid agent type
                InvalidAgentVersion:
                  value:
                    error: invalid agent version
                UnsupportedAgentVersion:
                  value:
                    error: unsupported agent version
                InvalidAgentEdition:
                  value:
                    error: invalid agent edition
                InvalidAgentFlags:
                  value:
                    error: invalid agent flags
                InvalidAgentFlag:
                  value:
                    error: invalid agent flag
                InvalidAgentRawConfig:
                  value:
                    error: invalid agent raw config
        500:
          $ref: '#/components/responses/internalServerError'
        200:
          description: OK (updated)
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  token:
                    type: string
                  name:
                    type: string
                    format: hostname
                    example: my-machine
                  createdAt:
                    type: string
                    format: date-time
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  token:
                    type: string
                  name:
                    type: string
                    format: hostname
                    example: my-machine
                  createdAt:
                    type: string
                    format: date-time
  /v1/projects/{projectID}/agents:
    get:
      security:
        - userAuth: []
        - projectAuth: []
      summary: Project agents
      operationId: projectAgents
      tags: [Agent]
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: name
          in: query
          description: |
            Filter agents by the given name.
          schema:
            type: string
        - name: last
          in: query
          description: |
            Fetch just the last agents.
            Zero fetches all.
          schema:
            type: integer
            format: int64
            default: 10
            minimum: 0
      responses:
        401:
          description: Unautenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: unautenticated
        403:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: email not verified
        422:
          description: Invalid arguments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                InvalidProjectID:
                  value:
                    error: invalid project ID
                InvalidAgentName:
                  value:
                    error: invalid agent name
                InvalidLast:
                  value:
                    error: invalid last
        500:
          $ref: '#/components/responses/internalServerError'
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/agent'
  /v1/agents/{agentID}:
    get:
      security:
        - userAuth: []
        - projectAuth: []
        - agentAuth: []
      summary: Agent
      operationId: agent
      tags: [Agent]
      parameters:
        - name: agentID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: unauthenticated
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: agent not found
        422:
          description: Invalid arguments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: invalid agent ID
        500:
          $ref: '#/components/responses/internalServerError'
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/agent'
    patch:
      security:
        - userAuth: []
        - projectAuth: []
        - agentAuth: []
      summary: Update agent
      operationId: updateAgent
      tags: [Agent]
      parameters:
        - name: agentID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: RFC1123 hostname
                  type: string
                  format: hostname
                  example: renamed-machine
                version:
                  type: string
                  example: '1.7.10'
                  description: Minimum agent version is 1.8.6 for fluent-bit case.
                edition:
                  type: string
                  enum:
                    - community
                    - enterprise
                flags:
                  type: array
                  items:
                    type: string
                  example:
                    - FLB_HAVE_TLS
                    - FLB_HAVE_METRICS
                    - FLB_HAVE_SQLDB
                    - FLB_HAVE_TRACE
                    - FLB_HAVE_HTTP_SERVER
                    - FLB_HAVE_FLUSH_LIBCO
                    - FLB_HAVE_SYSTEMD
                    - FLB_HAVE_VALGRIND
                    - FLB_HAVE_FORK
                    - FLB_HAVE_PROXY_GO
                    - FLB_HAVE_REGEX
                    - FLB_HAVE_C_TLS
                    - FLB_HAVE_SETJMP
                    - FLB_HAVE_ACCEPT4
                    - FLB_HAVE_INOTIFY
                rawConfig:
                  type: string
                  example: |
                    [SERVICE]
                        Flush           1
                        Daemon          on
                        Log_Level       debug
                metadata:
                  $ref: '#/components/schemas/agentMetadata'
      responses:
        400:
          $ref: '#/components/responses/badRequestError'
        401:
          description: Unauthenticated or unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                Unauthenticated:
                  value:
                    error: unauthenticated
                Unauthorized:
                  value:
                    error: unauthorized
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                UpdateAgentVersionForbidden:
                  value:
                    error: update agent version forbidden
                UpdateAgentEditionForbidden:
                  value:
                    error: update agent edition forbidden
                UpdateAgentFlagsForbidden:
                  value:
                    error: update agent flags forbidden
                UpdateAgentRawConfigForbidden:
                  value:
                    error: update agent raw config forbidden
        410:
          description: Gone
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: agent gone
        422:
          description: Invalid arguments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                InvalidAgentID:
                  value:
                    error: invalid agent ID
                InvalidAgentName:
                  value:
                    error: invalid agent name
                InvalidAgentVersion:
                  value:
                    error: invalid agent version
                UnsupportedAgentVersion:
                  value:
                    error: unsupported agent version
                InvalidAgentEdition:
                  value:
                    error: invalid agent edition
                InvalidAgentFlags:
                  value:
                    error: invalid agent flags
                InvalidAgentFlag:
                  value:
                    error: invalid agent flag
                InvalidAgentRawConfig:
                  value:
                    error: invalid agent raw config
        500:
          $ref: '#/components/responses/internalServerError'
        204:
          description: Updated
    delete:
      security:
        - userAuth: []
        - projectAuth: []
        - agentAuth: []
      summary: Delete agent
      description: |
        Delete an agent and their associated API key.
      operationId: deleteAgent
      tags: [Agent]
      parameters:
        - name: agentID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: unauthenticated
        422:
          description: Invalid arguments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: invalid agent ID
        500:
          $ref: '#/components/responses/internalServerError'
        204:
          description: Deleted
  /v1/projects/{projectID}/metrics:
    get:
      security:
        - userAuth: []
        - projectAuth: []
      summary: Project metrics
      operationId: metrics
      tags: [Project Metric]
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: start
          required: false
          in: query
          description: |
            Option to filter metrics since the given time ago
          schema:
            type: string
            format: duration
            default: -24h
        - name: interval
          required: false
          in: query
          description: |
            Option to set the time window to group metrics
          schema:
            type: string
            format: duration
            default: 1h
      responses:
        500:
          $ref: '#/components/responses/internalServerError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: no metrics found
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: unauthenticated
        422:
          description: Invalid arguments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                InvalidProjectID:
                  value:
                    error: invalid project ID
                InvalidStart:
                  value:
                    error: invalid start parameter
                InvalidInterval:
                  value:
                    error: invalid interval parameter
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - measurements
                properties:
                  measurements:
                    type: object
                    additionalProperties:
                      type: object
                      required:
                        - totals
                        - plugins
                      properties:
                        totals:
                          type: object
                          additionalProperties:
                            type: number
                            format: float
                        plugins:
                          type: object
                          additionalProperties:
                            type: object
                            required:
                              - metrics
                            properties:
                              metrics:
                                type: object
                                additionalProperties:
                                  type: array
                                  items:
                                    $ref: '#/components/schemas/metricField'
                  topPlugins:
                    type: object
                    additionalProperties:
                      type: object
                      required:
                        - bytes
                      properties:
                        bytes:
                          type: number
                          format: float
              example: |
                {
                    "topPlugins": {
                      "http.0": {
                        "bytes":10000.0
                      }
                    },
                    "measurements":{
                        "fluentbit_output":{
                            "totals":{
                                "bytes":100
                            },
                            "plugins":{
                                "http.0": {
                                  "metrics": {
                                    "bytes":[
                                      {
                                          "time":"2021-07-14T05:14:28.234899805Z1",
                                          "value":100
                                      }
                                    ]
                                  }
                                }
                            }
                        }
                    }
                }
  /v1/agent_metrics:
    post:
      security:
        - agentAuth: []
      summary: Add agent metrics
      description: |
        Stores the received metrics in the metrics database
      operationId: addAgentMetrics
      tags: [Agent Metric]
      parameters:
        - name: agentID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/x-msgpack:
            schema:
              type: string
              format: binary
              description: |
                Msgpack encoded metrics using cmetrics library.
      responses:
        201:
          description: Added
          content:
            application/json:
              schema:
                type: object
                required:
                  - totalInserted
                properties:
                  totalInserted:
                    type: integer
                    format: int64
                    minimum: 0
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: bad request
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: unauthorized
        422:
          description: Invalid metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                InvalidAgentID:
                  value:
                    error: invalid agent ID
        500:
          $ref: '#/components/responses/internalServerError'
  /v1/agents/{agentID}/metrics:
    post:
      security:
        - agentAuth: []
      summary: See POST /v1/agent_metrics
      deprecated: true
      tags: [Agent Metric]
      responses:
        308:
          description: Redirect
          headers:
            Location:
              schema:
                type: string
                default: /v1/agent_metrics
    get:
      security:
        - agentAuth: []
      summary: Agent metrics
      operationId: agentMetrics
      tags: [Agent Metric]
      parameters:
        - name: agentID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: start
          required: false
          in: query
          description: |
            Option to filter metrics since the given time ago
          schema:
            type: string
            format: duration
            default: -24h
        - name: interval
          required: false
          in: query
          description: |
            Option to set the time window to group metrics
          schema:
            type: string
            format: duration
            default: 1h
      responses:
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: unauthorized
        500:
          $ref: '#/components/responses/internalServerError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: no metrics found
        422:
          description: Invalid arguments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                InvalidStart:
                  value:
                    error: invalid start parameter
                InvalidInterval:
                  value:
                    error: invalid interval parameter
        200:
          description: returns the list of metrics for the agent
          content:
            application/json:
              schema:
                type: object
                required:
                  - measurements
                properties:
                  measurements:
                    type: object
                    additionalProperties:
                      type: object
                      required:
                        - plugins
                        - totals
                      properties:
                        plugins:
                          type: object
                          additionalProperties:
                            type: object
                            required:
                              - metrics
                            properties:
                              metrics:
                                type: object
                                additionalProperties:
                                  type: array
                                  items:
                                    $ref: '#/components/schemas/metricField'
                        totals:
                          type: object
                          additionalProperties:
                            type: array
                            items:
                              $ref: '#/components/schemas/metricField'
              example: |
                {
                  "measurements": {
                    "fluentbit_output": {
                      "plugins": {
                        "cpu.0": {
                          "metrics": {
                            "bytes": [
                              {
                                "time": "2021-07-20T02:36:42.376279971Z",
                                "value": 1
                              }
                            ]
                          }
                        },
                        "cpu.1": {
                          "metrics": {
                            "bytes": [
                              {
                                "time": "2021-07-20T02:36:42.376279971Z",
                                "value": 1
                              }
                            ]
                          }
                        }
                      },
                      "totals": {
                        "bytes": [
                          {
                            "time": "2021-07-20T02:36:42.376279971Z",
                            "value": 2
                          }
                        ]
                      }
                    }
                  }
                }
  /v1/pipeline_metrics/{pipelineID}:
    get:
      security:
        - agentAuth: []
      summary: Pipeline metrics
      operationId: pipelineMetrics
      tags: [Pipeline Metric]
      parameters:
        - name: pipelineID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: start
          required: false
          in: query
          description: |
            Option to filter metrics since the given time ago
          schema:
            type: string
            format: duration
            default: -24h
        - name: interval
          required: false
          in: query
          description: |
            Option to set the time window to group metrics
          schema:
            type: string
            format: duration
            default: 1h
      responses:
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: unauthorized
        500:
          $ref: '#/components/responses/internalServerError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: no metrics found
        422:
          description: Invalid arguments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                InvalidStart:
                  value:
                    error: invalid start parameter
                InvalidInterval:
                  value:
                    error: invalid interval parameter
        200:
          description: returns the list of metrics for the pipeline
          content:
            application/json:
              schema:
                type: object
                required:
                  - measurements
                properties:
                  measurements:
                    type: object
                    additionalProperties:
                      type: object
                      required:
                        - plugins
                        - totals
                      properties:
                        plugins:
                          type: object
                          additionalProperties:
                            type: object
                            required:
                              - metrics
                            properties:
                              metrics:
                                type: object
                                additionalProperties:
                                  type: array
                                  items:
                                    $ref: '#/components/schemas/metricField'
                        totals:
                          type: object
                          additionalProperties:
                            type: array
                            items:
                              $ref: '#/components/schemas/metricField'
              example: |
                {
                  "measurements": {
                    "fluentbit_output": {
                      "plugins": {
                        "cpu.0": {
                          "metrics": {
                            "bytes": [
                              {
                                "time": "2021-07-20T02:36:42.376279971Z",
                                "value": 1
                              }
                            ]
                          }
                        },
                        "cpu.1": {
                          "metrics": {
                            "bytes": [
                              {
                                "time": "2021-07-20T02:36:42.376279971Z",
                                "value": 1
                              }
                            ]
                          }
                        }
                      },
                      "totals": {
                        "bytes": [
                          {
                            "time": "2021-07-20T02:36:42.376279971Z",
                            "value": 2
                          }
                        ]
                      }
                    }
                  }
                }
  /v1/agents/{agentID}/config_history:
    get:
      security:
        - userAuth: []
        - projectAuth: []
        - agentAuth: []
      summary: Agent config history
      description: |
        A new config history item is stored everytime an agent is created
        or updated and its config changes.
      operationId: agentConfigHistory
      tags: [Agent Config]
      parameters:
        - name: agentID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: last
          in: query
          description: |
            Fetch just the last configurations items in history.
            Zero fetches all.
          schema:
            type: integer
            format: int64
            default: 10
            minimum: 0
      responses:
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: unauthenticated
        500:
          $ref: '#/components/responses/internalServerError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                AgentNotFound:
                  value:
                    error: agent not found
                ProjectNotFound:
                  value:
                    error: project not found
        422:
          description: Invalid arguments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                InvalidAgentID:
                  value:
                    error: invalid agent ID
                InvalidLast:
                  value:
                    error: invalid last
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/agentConfig'

  /projects/{projectID}/aggregator_pipelines:
    get:
      security:
        - userAuth: []
        - projectAuth: []
      summary: Project pipelines
      description: |
        List all pipelines from within a project.
      operationId: projectPipelines
      tags: [Pipeline]
      parameters:
        - name: projectID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: name
          in: query
          description: |
            Filter projects by the given name
          schema:
            type: string
        - name: last
          in: query
          description: |
            Fetch just the last pipelines.
            Zero fetches all.
          schema:
            type: integer
            format: int64
            default: 10
            minimum: 0
      responses:
        401:
          description: Unauthenticated or unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                Unauthenticated:
                  value:
                    error: unauthenticated
                PermissionDenied:
                  value:
                    error: permission denied
        500:
          $ref: '#/components/responses/internalServerError'
        422:
          description: Invalid arguments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                InvalidProjectID:
                  value:
                    error: invalid project ID
                InvalidAggregatorPipelineName:
                  value:
                    error: invalid aggregator pipeline name
                InvalidLast:
                  value:
                    error: invalid last
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/aggregatorPipeline'

  /v1/aggregator_pipelines/{pipelineID}/config_history:
    get:
      security:
        - userAuth: []
      summary: Pipeline config history
      description: |
        A new config history item is stored everytime a pipeline is created
        or updated and its config changes.
      operationId: pipelineConfigHistory
      tags: [Pipeline Config]
      parameters:
        - name: pipelineID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: last
          in: query
          description: |
            Fetch just the last configurations items in history.
            Zero fetches all.
          schema:
            type: integer
            format: int64
            default: 10
            minimum: 0
      responses:
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: unauthenticated
        500:
          $ref: '#/components/responses/internalServerError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                PipelineNotFound:
                  value:
                    error: pipeline not found
        422:
          description: Invalid arguments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                InvalidAggregatorPipelineID:
                  value:
                    error: invalid pipeline ID
                InvalidLast:
                  value:
                    error: invalid last
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/pipelineConfig'

  /v1/aggregator_pipelines/{pipelineID}/status_history:
    get:
      security:
        - userAuth: []
      summary: Pipeline status history
      description: |
        A new status history item is stored everytime a pipeline is created
        or updated and/or its status changes.
      operationId: pipelineStatusHistory
      tags: [Pipeline Status]
      parameters:
        - name: pipelineID
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: last
          in: query
          description: |
            Fetch just the last status items in history.
            Zero fetches all.
          schema:
            type: integer
            format: int64
            default: 10
            minimum: 0
        - name: status
          in: query
          description: |
            Filter results by pipeline status
          schema:
            type: string
            format: string
            default: ''
      responses:
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: unauthenticated
        500:
          $ref: '#/components/responses/internalServerError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                PipelineNotFound:
                  value:
                    error: pipeline not found
        422:
          description: Invalid arguments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                InvalidAggregatorPipelineID:
                  value:
                    error: invalid pipeline ID
                InvalidLast:
                  value:
                    error: invalid last
                InvalidAggregatorPipelineStatus:
                  value:
                    error: invalid aggregator pipeline status
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/pipelineStatus'

  /v1/config_validate/{agentType}:
    post:
      security:
        - userAuth: []
        - projectAuth: []
      summary: Post to config validation service
      operationId: agentConfigValidation
      tags: [Agent Config Validation]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - $ref: '#/components/schemas/configToValidate'
      responses:
        401:
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                error: unauthenticated
        500:
          $ref: '#/components/responses/internalServerError'
        200:
          description: Succeeded to validate the given configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validatedConfig'
